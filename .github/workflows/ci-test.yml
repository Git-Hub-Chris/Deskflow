name: CI Test

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [master*, release*]

concurrency:
  group: "${{ github.workflow }}-${{ github.ref || github.run_id }}"
  cancel-in-progress: true

jobs:
  test-windows:
    runs-on: windows-latest
    timeout-minutes: 20

    env:
      GIT_COMMIT: ${{ github.sha }}
      BONJOUR_BASE_DIR: ${{ github.workspace }}\deps\bonjour
      QT_BASE_DIR: ${{ github.workspace }}\deps\Qt
      QT_VERSION: 5.15.2

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ${{ env.QT_BASE_DIR }}
          key: ${{ runner.os }}-Qt_${{ env.QT_VERSION }}

      - name: Install Qt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: python ./scripts/install_deps.py --only qt

      - name: Cache Bonjour
        id: cache-bonjour
        uses: actions/cache@v1
        with:
          path: ${{ env.BONJOUR_BASE_DIR }}
          key: ${{ runner.os }}-Bonjour

      - name: Install Bonjour SDK
        if: steps.cache-bonjour.outputs.cache-hit != 'true'
        run: |
          New-Item -Force -ItemType Directory -Path "$env:BONJOUR_BASE_DIR"
          $client = new-object System.Net.WebClient
          $client.DownloadFile("https://binaries.symless.com/bonjour/BonjourSDK.zip",".\bonjoursdk.zip")
          [System.IO.Compression.ZipFile]::ExtractToDirectory(".\bonjoursdk.zip", "$env:BONJOUR_BASE_DIR")

      - name: Install dependencies
        run: |
          pip install pyyaml
          python ./scripts/install_deps.py

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Configure and build
        env:
          CMAKE_PREFIX_PATH: "${{ env.QT_BASE_DIR }}\\${{ env.QT_VERSION }}\\msvc2019_64\\"
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          . ./version
          msbuild synergy-core.sln /p:Configuration=Release

      - name: Test
        run: .\build\bin\Release\unittests.exe

  test-macos:
    runs-on: ${{ matrix.runtime.os }}
    timeout-minutes: 20
    name: test-${{ matrix.runtime.name }}

    defaults:
      run:
        shell: ${{ matrix.runtime.shell }}

    strategy:
      matrix:
        runtime:
          - name: "macos-10-intel"
            os: "macos-14-large"
            arch: x64
            target: "10.14"
            shell: "bash"
          - name: "macos-11-m1"
            os: "macos-14"
            arch: arm64
            target: "11"
            shell: "/usr/bin/arch -arch arm64e /bin/bash --noprofile --norc -eo pipefail {0}"

    env:
      GIT_COMMIT: ${{ github.sha }}

    steps:
      - name: Setup PATH
        run: |
          case "$ARCH" in
            "arm64")
              echo "/opt/homebrew/bin" >> $GITHUB_PATH
              ;;
          esac
        env:
          ARCH: ${{ matrix.runtime.arch }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Install dependencies
        run: |
          pip install pyyaml
          python ./scripts/install_deps.py

      - name: Configure
        env:
          CMAKE_OSX_DEPLOYMENT_TARGET: ${{ matrix.runtime.target }}
        run: cmake -B build --preset=macos-release -DCMAKE_PREFIX_PATH=$(brew --prefix qt@5)

      - name: Build
        run: cmake --build build

      - name: Test
        run: ./build/bin/unittests

  test-linux:
    runs-on: ${{ matrix.distro.runs-on }}
    timeout-minutes: 10
    name: test-linux-${{ matrix.distro.name }}
    container: symless/synergy-core:${{ matrix.distro.container }}

    env:
      GIT_COMMIT: ${{ github.sha }}

    strategy:
      matrix:
        distro:
          - name: centos-7.6
            container: centos7.6
            runs-on: ubuntu-latest
            legacy-cmake: true

          - name: centos-8
            container: centos8
            runs-on: ubuntu-latest
            legacy-cmake: true

          - name: debian-11
            container: debian11
            runs-on: ubuntu-latest
            legacy-cmake: true

          - name: debian-12
            container: debiansid
            runs-on: ubuntu-latest

          - name: fedora-37
            container: fedora37
            runs-on: ubuntu-latest
            legacy-cmake: true

          - name: fedora-38
            container: fedora38
            runs-on: ubuntu-latest
            legacy-cmake: true

          - name: ubuntu-20.04
            container: ubuntu20.04
            runs-on: ubuntu-latest
            legacy-cmake: true

          - name: ubuntu-22.04
            container: ubuntu22.04
            runs-on: ubuntu-latest

          - name: ubuntu-24.04
            runs-on: ubuntu-24.04
            install-deps: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Install dependencies
        if: ${{ matrix.distro.install-deps }}
        run: python ./scripts/install_deps.py

      - name: Configure
        if: ${{ !matrix.distro.legacy-cmake }}
        run: cmake -B build --preset=linux-release

      - name: Configure (legacy)
        if: ${{ matrix.distro.legacy-cmake }}
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build

      - name: Test
        run: ./build/bin/unittests
