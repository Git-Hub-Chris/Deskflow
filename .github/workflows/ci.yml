# All-in-one continuous integration (CI) workflow.
# Runs on all platforms (Windows, macOS, and Linux)
# for all events (pull request, release, and schedule).

name: CI

on:
  workflow_dispatch:
    inputs:
      version:
        description: Synergy version number
        required: true
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  release:
    types: [published]
  schedule:
    - cron: "0 5 * * *"

env:
  GIT_SHA: ${{ github.sha }}
  SYNERGY_VERSION: ${{ github.event.inputs.version || github.event.release.tag_name }}
  SYNERGY_PRODUCT_NAME: ${{ vars.SYNERGY_PRODUCT_NAME }}
  SYNERGY_PACKAGE_PREFIX: ${{ vars.SYNERGY_PACKAGE_PREFIX }}
  SYNERGY_ENABLE_LICENSING: ${{ vars.SYNERGY_ENABLE_LICENSING }}
  PACKAGE_BUILD: ${{ !github.event.pull_request.draft }}
  PACKAGE_UPLOAD: ${{ !github.event.pull_request.draft && github.event_name != 'schedule' }}
  UPLOAD_TO_GITHUB: ${{ github.event_name == 'pull_request' && !github.event.pull_request.draft }}
  UPLOAD_TO_GDRIVE: ${{ github.event_name != 'pull_request' }}

jobs:
  windows:
    name: ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.runs-on }}
    container: ${{ matrix.target.container }}
    timeout-minutes: 20

    strategy:
      matrix:
        target:
          - name: windows-2022-x64
            runs-on: windows-2022-8-core-x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Cache Chocolatey packages
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/choco
          key: choco-${{ hashFiles('Chocolatey.config') }}

      - name: Cache deps dir
        uses: actions/cache@v4
        with:
          path: ./deps
          key: ${{ runner.os }}-deps-${{ hashFiles('config.yml') }}

      - name: Install dependencies
        run: python ./scripts/install_deps.py --ci-env

      - name: Setup VC++ environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure
        run: cmake -B build --preset=windows-release

      - name: Build
        run: cmake --build build -j8

      - name: Test
        run: ./build/bin/unittests

      - name: Package
        if: ${{ vars.SYNERGY_ENABLE_PACKAGING && env.PACKAGE_BUILD == 'true' }}
        run: python ./scripts/package.py
        env:
          WINDOWS_PFX_CERTIFICATE: ${{ secrets.WINDOWS_PFX }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASS }}

      - name: Upload
        if: ${{ vars.SYNERGY_ENABLE_PACKAGING && env.PACKAGE_UPLOAD == 'true' }}
        uses: ./.github/actions/dist-upload
        with:
          use_github: ${{ env.UPLOAD_TO_GITHUB }}
          use_gdrive: ${{ env.UPLOAD_TO_GDRIVE }}
          github-target-filename: "${{ env.SYNERGY_PACKAGE_PREFIX }}-${{ matrix.target.name }}"
          gdrive-target-base-dir: ${{ vars.GDRIVE_TARGET_BASE_DIR }}
          gdrive-secret-key: ${{ secrets.GOOGLE_DRIVE_KEY }}
          gdrive-parent-folder-id: ${{ secrets.GOOGLE_DRIVE_TECH_DRIVE }}
          package-version: ${{ env.SYNERGY_VERSION }}

  macos:
    name: ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.os }}
    timeout-minutes: ${{ matrix.target.timeout }}

    defaults:
      run:
        shell: ${{ matrix.target.shell }}

    strategy:
      matrix:
        target:
          - name: "macos-11-arm64"
            timeout: 10
            os: "macos-14"
            arch: arm64
            shell: "/usr/bin/arch -arch arm64e /bin/bash --noprofile --norc -eo pipefail {0}"

          - name: "macos-10-intel"
            timeout: 20
            os: "macos-14-large"
            arch: x64
            shell: "bash"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Cache deps dir
        uses: actions/cache@v4
        with:
          path: ./deps
          key: ${{ runner.os }}-deps-${{ hashFiles('config.yml') }}

      - name: Install dependencies
        run: ./scripts/install_deps.py --ci-env

      - name: Configure
        run: cmake -B build --preset=macos-release

      - name: Build
        run: cmake --build build -j8

      - name: Test
        run: ./build/bin/unittests

      - name: Package
        if: ${{ vars.SYNERGY_ENABLE_PACKAGING && env.PACKAGE_BUILD == 'true' }}
        run: ./scripts/package.py
        env:
          APPLE_CODESIGN_ID: ${{ secrets.APPLE_CODESIGN_ID }}
          APPLE_P12_CERTIFICATE: ${{ secrets.APPLE_P12_CERTIFICATE }}
          APPLE_P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          APPLE_NOTARY_USER: ${{ secrets.APPLE_NOTARY_USER }}
          APPLE_NOTARY_PASSWORD: ${{ secrets.APPLE_NOTARY_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Upload
        if: ${{ vars.SYNERGY_ENABLE_PACKAGING && env.PACKAGE_UPLOAD == 'true' }}
        uses: ./.github/actions/dist-upload
        with:
          use_github: ${{ env.UPLOAD_TO_GITHUB }}
          use_gdrive: ${{ env.UPLOAD_TO_GDRIVE }}
          github-target-filename: "${{ env.SYNERGY_PACKAGE_PREFIX }}-${{ matrix.target.name }}"
          gdrive-target-base-dir: ${{ vars.GDRIVE_TARGET_BASE_DIR }}
          gdrive-secret-key: ${{ secrets.GOOGLE_DRIVE_KEY }}
          gdrive-parent-folder-id: ${{ secrets.GOOGLE_DRIVE_TECH_DRIVE }}
          package-version: ${{ env.SYNERGY_VERSION }}

  linux:
    name: linux-${{ matrix.distro.name }}
    runs-on: ${{ matrix.distro.runs-on }}
    container: ${{ matrix.distro.container }}
    timeout-minutes: 20

    env:
      # Prevent apt prompting for input.
      DEBIAN_FRONTEND: noninteractive

    strategy:
      matrix:
        distro:
          - name: debian-12-arm64
            container: symless/synergy-core:debian-12-arm64
            runs-on: buildjet-4vcpu-ubuntu-2204-arm
            extra-packages: true

          - name: debian-12-amd64
            container: symless/synergy-core:debian-12-amd64
            runs-on: ubuntu-latest
            extra-packages: true

          - name: ubuntu-24.04-amd64
            container: symless/synergy-core:ubuntu-24.04-amd64
            runs-on: ubuntu-latest

          - name: ubuntu-22.04-amd64
            container: symless/synergy-core:ubuntu-22.04-amd64
            runs-on: ubuntu-latest

          - name: fedora-40-arm64
            container: symless/synergy-core:fedora-40-arm64
            runs-on: buildjet-4vcpu-ubuntu-2204-arm

          - name: fedora-40-amd64
            container: symless/synergy-core:fedora-40-amd64
            runs-on: ubuntu-latest

          - name: fedora-39-amd64
            container: symless/synergy-core:fedora-39-amd64
            runs-on: ubuntu-latest

          - name: opensuse-amd64
            container: symless/synergy-core:opensuse-amd64
            runs-on: ubuntu-latest

          - name: archlinux-amd64
            container: symless/synergy-core:archlinux-amd64
            runs-on: ubuntu-latest
            package-user: build

          - name: manjaro-amd64
            container: symless/synergy-core:manjaro-amd64
            runs-on: ubuntu-latest
            package-user: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Config Git safe dir
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Install dependencies
        run: ./scripts/install_deps.py --ci-env

      - name: Configure
        run: cmake -B build --preset=linux-release

      - name: Build
        run: cmake --build build -j8

      - name: Test
        run: ./build/bin/unittests

      - name: Package
        if: ${{ vars.SYNERGY_ENABLE_PACKAGING && env.PACKAGE_BUILD == 'true' }}
        env:
          LINUX_EXTRA_PACKAGES: ${{ matrix.distro.extra-packages }}
          LINUX_PACKAGE_USER: ${{ matrix.distro.package-user }}
        run: ./scripts/package.py

      - name: Upload
        if: ${{ vars.SYNERGY_ENABLE_PACKAGING && env.PACKAGE_UPLOAD == 'true' }}
        uses: ./.github/actions/dist-upload
        with:
          use_github: ${{ env.UPLOAD_TO_GITHUB }}
          use_gdrive: ${{ env.UPLOAD_TO_GDRIVE }}
          github-target-filename: "${{ env.SYNERGY_PACKAGE_PREFIX }}-${{ matrix.distro.name }}"
          gdrive-target-base-dir: ${{ vars.GDRIVE_TARGET_BASE_DIR }}
          gdrive-secret-key: ${{ secrets.GOOGLE_DRIVE_KEY }}
          gdrive-parent-folder-id: ${{ secrets.GOOGLE_DRIVE_TECH_DRIVE }}
          package-version: ${{ env.SYNERGY_VERSION }}
